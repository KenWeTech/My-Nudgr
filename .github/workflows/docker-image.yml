
name: Docker Image CI

on:
  push:
    branches: [ "main" ] # Run when changes are pushed to the main branch
  pull_request:
    branches: [ "main" ] # Run on pull requests targeting the main branch
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    # Grant permissions for the GITHUB_TOKEN to push to ghcr.io
    permissions:
      contents: read
      packages: write

    steps:
      # 1. Checkout your repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Log in to the GitHub Container Registry
      - name: Log in to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. Extract metadata (like tags and labels) for the Docker image
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} # e.g., ghcr.io/your-username/my-nudgr

      # 4. Set up QEMU for multi-platform builds (optional, but good practice)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 5. Set up Docker Buildx for advanced build capabilities
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 6. Build the image and push it to the registry
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./My-Nudgr/My-Nudgr/
          # Only push the image on a push to the main branch, not on pull requests
          push: ${{ github.event_name != 'pull_request' }}
          # Use the tags generated by the metadata action (e.g., :latest, :sha-xxxxxxx)
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Build for both standard and ARM-based architectures (e.g., Raspberry Pi)
          platforms: linux/amd64,linux/arm64
